const express = require('express');
const passport = require('passport');
const SteamStrategy = require('passport-steam').Strategy;
const mysql = require('mysql2');
const verifyUser = require('../utils/verifyUser'); // 사용자가 로그인되어 있는지 확인하는 미들웨어
const generalApi = require('./node_modules/general');
const adminApi = require('./node_modules/admin');
const router = express.Router();

// Steam API 설정
const STEAM_API_KEY = process.env.STEAM_API_KEY || 'your_default_steam_api_key';

passport.use(new SteamStrategy({
  returnURL: process.env.RETURN_URL,
  realm: process.env.REALM,
  apiKey: STEAM_API_KEY
}, (identifier, profile, done) => {
  process.nextTick(() => done(null, profile));
}));

// Steam 로그인 라우트
router.get('/api/auth/steam', passport.authenticate('steam'));

router.get('/api/auth/steam/return', passport.authenticate('steam', { failureRedirect: '/' }), (req, res) => {
  res.redirect(process.env.REDIRECT_URL);
});

// 로그인한 사용자 정보 반환
router.get('/api/user', (req, res) => {
  res.json({ user: req.isAuthenticated() ? req.user : null });
});

// MySQL 연결 설정
const connection = mysql.createConnection({
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || 'my-secret-pw',
  database: process.env.DB_NAME || 'mydatabase',
  supportBigNumbers: true,
  bigNumberStrings: true
});

// 특정 사용자(Steam ID)의 자원 데이터를 반환하는 API
router.get('/api/resources/:steamid', verifyUser, (req, res) => {
  const steamId = req.params.steamid;
  const query = 'SELECT * FROM online_storage WHERE steam_id = ?';

  connection.query(query, [steamId], (err, results) => {
    if (err) {
      console.error('자원 데이터 조회 오류:', err);
      return res.status(500).json({ error: '데이터베이스 오류' });
    }

    if (results.length > 0) {
      res.json({ steamid: steamId, resources: results[0] });
    } else {
      res.json({ steamid: steamId, resources: 'No data' });
    }
  });
});

// 특정 사용자(Steam ID)의 피해 데이터를 반환하는 API
router.get('/api/damage/:steamid', verifyUser, (req, res) => {
  const steamId = req.params.steamid;
  const query = 'SELECT * FROM damage_logs WHERE steam_id = ?';

  connection.query(query, [steamId], (err, results) => {
    if (err) {
      console.error('피해 데이터 조회 오류:', err);
      return res.status(500).json({ error: '데이터베이스 오류' });
    }

    if (results.length > 0) {
      res.json({ steamid: steamId, totalDamage: results[0].total_damage });
    } else {
      res.json({ steamid: steamId, totalDamage: 0 });
    }
  });
});

// 특정 사용자(Steam ID)의 코인 잔액을 반환하는 API
router.get('/api/coin_balance/:steamid', verifyUser, (req, res) => {
  const steamId = req.params.steamid;
  const query = 'SELECT * FROM coin_balance WHERE steam_id = ?';

  connection.query(query, [steamId], (err, results) => {
    if (err) {
      console.error('코인 잔액 조회 오류:', err);
      return res.status(500).json({ error: '데이터베이스 오류' });
    }

    if (results.length > 0) {
      res.json({ steamid: steamId, coin_balance: results[0].sek_coin_balance });
    } else {
      res.json({ steamid: steamId, coin_balance: 0 });
    }
  });
});

module.exports = router;
